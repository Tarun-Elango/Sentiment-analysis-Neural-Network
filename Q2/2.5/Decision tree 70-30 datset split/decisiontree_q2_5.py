# -*- coding: utf-8 -*-
"""decisionTree Q2.5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SDjC1i8LB3cYs1_J3qx8KKCWg-VwJ6lh
"""

import numpy as np
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix,classification_report
import sys

file = open(sys.path[0] + '/../../../Q1/data.csv', encoding="utf-8")
performance = open("performance decision tree 70-30 train-test split.txt", "w")

# set the hyperparameters gridsearchCV
hyperparameters = {
    'criterion': ['entropy','gini'], # entropy, gini (gini gives best result) specifies how the tree is partitioned
    'max_depth': [20,50], #deeper tress get more intricate (20,50) (50 gives best result)
    'min_samples_split':[1,2,5] # (1,2,5) (2 gives best result) specifies min samples before splitting a node

}

data = pd.read_csv(file, names=['post', 'emotion','sentiment'], header=0)

# use countvectorizer and label encoder.
vectorizer = CountVectorizer()
le = LabelEncoder()

df_x = data['post']
df_y = data['emotion']
df_z = data['sentiment']
X = vectorizer.fit_transform(df_x)
Y = le.fit_transform(df_y)
Z= le.fit_transform(df_z)

performance.write('Decision tree performance stats\n\n')

#_________________________________emotion__________________________________________
x_train, x_test, y_train, y_test= train_test_split(X,Y, test_size=0.3,random_state=50)
# 2.2 split dataset into training (80%) and testing (20%), random value to keep the set deterministic
decisionClassEmo = tree.DecisionTreeClassifier()# decision tree classifier

# model for default decision tree and predict
model_dec_emo = decisionClassEmo.fit(x_train,y_train)
predictEmoDT = model_dec_emo.predict(x_test)
print('default decision tree emotion accuracy score', accuracy_score(y_test,predictEmoDT))
performance.write('default decision tree emotion accuracy score :')
performance.write(str(accuracy_score(y_test,predictEmoDT)))
confusionMatrixEmotion= confusion_matrix(y_test,predictEmoDT)
classificationReportEmotion = classification_report(y_test,predictEmoDT,zero_division=0)
print(classificationReportEmotion)
print(confusionMatrixEmotion)
performance.write('\n\n classification report of default decision tree for emotion\n')
performance.write(classificationReportEmotion)
performance.write('\n\n confusion matrix of default decision tree for emotion\n')
npMatrix = np.array2string(confusionMatrixEmotion)
performance.write(npMatrix)
performance.write('\n\n-------------------------x-------------------------')

# model for decision tree using the gridsearchCV parameters and predict
grid = GridSearchCV(estimator = decisionClassEmo, param_grid = hyperparameters)
model_emotion_grid = grid.fit(x_train,y_train)
predictEmoDTCV = model_emotion_grid.predict(x_test)
print('best parameters', grid.best_params_)
print('gridsearchCV decision tree emotion accuracy score', accuracy_score(y_test,predictEmoDTCV))
performance.write('\n\ngridsearchCV decision tree emotion accuracy score :')
performance.write(str(accuracy_score(y_test,predictEmoDTCV)))
performance.write('\n\ngridsearchCV decision tree emotion best parameters :')
performance.write(str( grid.best_params_))
confusionMatrixEmotionCV= confusion_matrix(y_test,predictEmoDTCV)
classificationReportEmotionCV = classification_report(y_test,predictEmoDTCV,zero_division=0)
print(classificationReportEmotion)
print(confusionMatrixEmotion)
performance.write('\n\n classification report of grid search decision tree for emotion\n')
performance.write(classificationReportEmotionCV)
performance.write('\n\n confusion matrix of grid search decision tree for emotion\n')
npMatrixCv = np.array2string(confusionMatrixEmotionCV)
performance.write(npMatrixCv)
performance.write('\n\n-------------------------x-------------------------')

#___________________________________sentiment_____________________________________________
x2_train, x2_test, z_train, z_test= train_test_split(X,Z, test_size=0.3, random_state=50)
decisionclasssent = tree.DecisionTreeClassifier()# decision tree classifier

# model for decision tree and predict
model_dec_sent = decisionclasssent.fit(x2_train,z_train)
predictsentDT = model_dec_sent.predict(x2_test)
print('default decision tree sentiment accuracy score', accuracy_score(z_test,predictsentDT))
performance.write('\n\ndefault decision tree sentiment accuracy score :')
performance.write(str(accuracy_score(z_test,predictsentDT)))
confusionMatrixsent= confusion_matrix(z_test,predictsentDT)
classificationReportsent = classification_report(z_test,predictsentDT,zero_division=0)
print(classificationReportsent)
print(confusionMatrixsent)
performance.write('\n\n classification report of default decision tree for sentiment\n')
performance.write(classificationReportsent)
performance.write('\n\n confusion matrix of default decision tree for sentiment\n')
npMatrixSent = np.array2string(confusionMatrixsent)
performance.write(npMatrixSent)
performance.write('\n\n-------------------------x-------------------------')

# model for decision tree using the gridsearchCV parameters and predict
gridse = GridSearchCV(estimator = decisionclasssent, param_grid = hyperparameters)
model_emotion_grid_CV = gridse.fit(x2_train,z_train)
predictsentDTCV = model_emotion_grid_CV.predict(x2_test)
print('best parameters', gridse.best_params_)
print('gridsearchCV decision tree sentiment accuracy score', accuracy_score(z_test,predictsentDTCV))
performance.write('\n\ngridsearchCV decision tree sentiment accuracy score :')
performance.write(str(accuracy_score(z_test,predictsentDTCV)))
performance.write('\n\ngridsearchCV decision tree sentiment best parameters :')
performance.write(str(gridse.best_params_))
confusionMatrixsentCV= confusion_matrix(z_test,predictsentDTCV)
classificationReportsentCV = classification_report(z_test,predictsentDTCV,zero_division=0)
print(classificationReportsentCV)
print(confusionMatrixsentCV)
performance.write('\n\n classification report of default decision tree for sentiment\n')
performance.write(classificationReportsentCV)
performance.write('\n\n confusion matrix of default decision tree for sentiment\n')
npMatrixSentCv = np.array2string(confusionMatrixsentCV)
performance.write(npMatrixSentCv)

performance.close()